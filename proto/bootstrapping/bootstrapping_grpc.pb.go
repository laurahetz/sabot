// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.3
// source: bootstrapping.proto

package bootstrapping

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BootstrappingClient is the client API for Bootstrapping service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BootstrappingClient interface {
	SetupExperiment(ctx context.Context, in *Config, opts ...grpc.CallOption) (*ParamResp, error)
	GetParameters(ctx context.Context, in *ParamRequest, opts ...grpc.CallOption) (*Params, error)
	SetColumn(ctx context.Context, in *NotifyRequest, opts ...grpc.CallOption) (*Ack, error)
	GetRow(ctx context.Context, in *Index, opts ...grpc.CallOption) (*Vector, error)
	MakeIQueries(ctx context.Context, in *Queries, opts ...grpc.CallOption) (*Answers, error)
	MakeKWQueries(ctx context.Context, in *Queries, opts ...grpc.CallOption) (*Answers, error)
}

type bootstrappingClient struct {
	cc grpc.ClientConnInterface
}

func NewBootstrappingClient(cc grpc.ClientConnInterface) BootstrappingClient {
	return &bootstrappingClient{cc}
}

func (c *bootstrappingClient) SetupExperiment(ctx context.Context, in *Config, opts ...grpc.CallOption) (*ParamResp, error) {
	out := new(ParamResp)
	err := c.cc.Invoke(ctx, "/bootstrapping.Bootstrapping/SetupExperiment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bootstrappingClient) GetParameters(ctx context.Context, in *ParamRequest, opts ...grpc.CallOption) (*Params, error) {
	out := new(Params)
	err := c.cc.Invoke(ctx, "/bootstrapping.Bootstrapping/GetParameters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bootstrappingClient) SetColumn(ctx context.Context, in *NotifyRequest, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/bootstrapping.Bootstrapping/SetColumn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bootstrappingClient) GetRow(ctx context.Context, in *Index, opts ...grpc.CallOption) (*Vector, error) {
	out := new(Vector)
	err := c.cc.Invoke(ctx, "/bootstrapping.Bootstrapping/GetRow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bootstrappingClient) MakeIQueries(ctx context.Context, in *Queries, opts ...grpc.CallOption) (*Answers, error) {
	out := new(Answers)
	err := c.cc.Invoke(ctx, "/bootstrapping.Bootstrapping/MakeIQueries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bootstrappingClient) MakeKWQueries(ctx context.Context, in *Queries, opts ...grpc.CallOption) (*Answers, error) {
	out := new(Answers)
	err := c.cc.Invoke(ctx, "/bootstrapping.Bootstrapping/MakeKWQueries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BootstrappingServer is the server API for Bootstrapping service.
// All implementations must embed UnimplementedBootstrappingServer
// for forward compatibility
type BootstrappingServer interface {
	SetupExperiment(context.Context, *Config) (*ParamResp, error)
	GetParameters(context.Context, *ParamRequest) (*Params, error)
	SetColumn(context.Context, *NotifyRequest) (*Ack, error)
	GetRow(context.Context, *Index) (*Vector, error)
	MakeIQueries(context.Context, *Queries) (*Answers, error)
	MakeKWQueries(context.Context, *Queries) (*Answers, error)
	mustEmbedUnimplementedBootstrappingServer()
}

// UnimplementedBootstrappingServer must be embedded to have forward compatible implementations.
type UnimplementedBootstrappingServer struct {
}

func (UnimplementedBootstrappingServer) SetupExperiment(context.Context, *Config) (*ParamResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetupExperiment not implemented")
}
func (UnimplementedBootstrappingServer) GetParameters(context.Context, *ParamRequest) (*Params, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetParameters not implemented")
}
func (UnimplementedBootstrappingServer) SetColumn(context.Context, *NotifyRequest) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetColumn not implemented")
}
func (UnimplementedBootstrappingServer) GetRow(context.Context, *Index) (*Vector, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRow not implemented")
}
func (UnimplementedBootstrappingServer) MakeIQueries(context.Context, *Queries) (*Answers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MakeIQueries not implemented")
}
func (UnimplementedBootstrappingServer) MakeKWQueries(context.Context, *Queries) (*Answers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MakeKWQueries not implemented")
}
func (UnimplementedBootstrappingServer) mustEmbedUnimplementedBootstrappingServer() {}

// UnsafeBootstrappingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BootstrappingServer will
// result in compilation errors.
type UnsafeBootstrappingServer interface {
	mustEmbedUnimplementedBootstrappingServer()
}

func RegisterBootstrappingServer(s grpc.ServiceRegistrar, srv BootstrappingServer) {
	s.RegisterService(&Bootstrapping_ServiceDesc, srv)
}

func _Bootstrapping_SetupExperiment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Config)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BootstrappingServer).SetupExperiment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bootstrapping.Bootstrapping/SetupExperiment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BootstrappingServer).SetupExperiment(ctx, req.(*Config))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bootstrapping_GetParameters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BootstrappingServer).GetParameters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bootstrapping.Bootstrapping/GetParameters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BootstrappingServer).GetParameters(ctx, req.(*ParamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bootstrapping_SetColumn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BootstrappingServer).SetColumn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bootstrapping.Bootstrapping/SetColumn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BootstrappingServer).SetColumn(ctx, req.(*NotifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bootstrapping_GetRow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Index)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BootstrappingServer).GetRow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bootstrapping.Bootstrapping/GetRow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BootstrappingServer).GetRow(ctx, req.(*Index))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bootstrapping_MakeIQueries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Queries)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BootstrappingServer).MakeIQueries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bootstrapping.Bootstrapping/MakeIQueries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BootstrappingServer).MakeIQueries(ctx, req.(*Queries))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bootstrapping_MakeKWQueries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Queries)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BootstrappingServer).MakeKWQueries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bootstrapping.Bootstrapping/MakeKWQueries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BootstrappingServer).MakeKWQueries(ctx, req.(*Queries))
	}
	return interceptor(ctx, in, info, handler)
}

// Bootstrapping_ServiceDesc is the grpc.ServiceDesc for Bootstrapping service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Bootstrapping_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bootstrapping.Bootstrapping",
	HandlerType: (*BootstrappingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetupExperiment",
			Handler:    _Bootstrapping_SetupExperiment_Handler,
		},
		{
			MethodName: "GetParameters",
			Handler:    _Bootstrapping_GetParameters_Handler,
		},
		{
			MethodName: "SetColumn",
			Handler:    _Bootstrapping_SetColumn_Handler,
		},
		{
			MethodName: "GetRow",
			Handler:    _Bootstrapping_GetRow_Handler,
		},
		{
			MethodName: "MakeIQueries",
			Handler:    _Bootstrapping_MakeIQueries_Handler,
		},
		{
			MethodName: "MakeKWQueries",
			Handler:    _Bootstrapping_MakeKWQueries_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bootstrapping.proto",
}
