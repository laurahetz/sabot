syntax = "proto3";
package bootstrapping;

option go_package = "proto/bootstrapping";

service Bootstrapping {
    rpc SetupExperiment(Config) returns (ParamResp){}
    rpc GetParameters(ParamRequest) returns (Params){}
    rpc SetColumn(NotifyRequest) returns (Ack){}
    rpc GetRow(Index) returns (Vector) {}
    rpc MakeIQueries(Queries) returns (Answers){}
    rpc MakeKWQueries(Queries) returns (Answers){}
}

message Config {
    bool resetServer = 1;
    string dbfile = 2;
    bool multiClient = 3;   //flag for benchmarking multi-client setting
    uint32 numThreads = 4;   //number of server threads
    uint32 cIdx = 5;    //client sends index to obtain its KW
    uint32 numTargets = 6;  // how many receiver sender wants to contact
    uint32 serverID = 7; //0 or 1 indicating which server is used
    bytes dbType = 8; 
}



// basically nothing needs to be transmitted here, just a "give params" request
message ParamRequest {
    uint32 cIdx = 1;
    uint32 numTargets = 2;  // how many receiver sender wants to contact
}

message ParamResp {
    bytes cKW = 1;
    repeated Params params = 2;
    bytes targets = 3;  //flat list of kws of targets used to set up client
}

message Params {
    uint32 nrows = 1;   
    bool auth = 2;  //specifies setting (false= semi-honest server, true=anytrust)
    uint64 seed = 3;    //for index mapping
    uint32 segLen = 4;  //for index mapping
    uint32 segLenMask = 5;  //for index mapping
    uint32 segCount = 6;    //for index mapping
    uint32 segCountLen = 7; //for index mapping
    uint32 keyLen = 8; 
    uint32 valLen = 9;
    uint32 recLength = 10;
    bytes root = 11;    //for merkle proof
    uint32 proofLen = 12; //for merkle proof
    repeated uint32 list = 13; //for index mapping
}

message Setup {
    ParamRequest params = 1;
    bytes ownKW = 2;
    bytes targets = 3;  //flat list of target keywords
}

message Query {
    bytes dpfKey = 1;
}

message Queries{
    repeated Query queries = 1;
}

message Answer {
    bytes answer = 1;
}

message Answers {
    repeated Answer answers = 1;
}

message NotifyRequest {
    uint32 idx = 1;
    Vector vec = 2;
}

message Index {
    uint32 idx = 1;
}

message Vector {
    bytes val = 1;
} 

message Ack {
    bool ok = 1;
}